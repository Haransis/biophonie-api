// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "TODO",
        "contact": {
            "name": "TODO",
            "url": "TODO",
            "email": "TODO"
        },
        "license": {
            "name": "GPL-3.0 license",
            "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/geopoint/{id}": {
            "get": {
                "description": "retrieve the geopoint in the database using its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Geopoint"
                ],
                "summary": "get a geopoint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "geopoint id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/geopoint.GeoPoint"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/geopoint/{id}/picture": {
            "get": {
                "description": "located in assets/",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Geopoint"
                ],
                "summary": "get the picture filename",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "geopoint id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/geopoint/{id}/sound": {
            "get": {
                "description": "located in assets/",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Geopoint"
                ],
                "summary": "get the sound filename",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "geopoint id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "used to check if api is alive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "pings the api",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/restricted/geopoint": {
            "post": {
                "description": "create the geopoint in the database and save the sound and picture file (see testgeopoint dir)",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Geopoint"
                ],
                "summary": "create a geopoint",
                "parameters": [
                    {
                        "type": "file",
                        "description": "geopoint infos in a utf-8 json file",
                        "name": "geopoint",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "geopoint sound",
                        "name": "sound",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "geopoint picture",
                        "name": "picture",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/geopoint.GeoPoint"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/restricted/geopoint/{id}/enable": {
            "patch": {
                "description": "make the geopoint available",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Geopoint"
                ],
                "summary": "make the geopoint available",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "geopoint id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/restricted/ping": {
            "get": {
                "description": "used to check if client is authenticated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "pings the authenticated api",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/restricted/user/{id}": {
            "patch": {
                "description": "make a user admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "make a user admin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authentication header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user is now admin",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "create a user in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "create user",
                "parameters": [
                    {
                        "description": "Add user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.AddUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/user/authorize": {
            "post": {
                "description": "create a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "create a token",
                "parameters": [
                    {
                        "description": "authentication user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.AuthUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "token to use for authentication",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        },
        "/user/{name}": {
            "get": {
                "description": "retrieve the user in the database using its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrMsg"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.ErrMsg": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "malformed request"
                }
            }
        },
        "geopoint.GeoPoint": {
            "type": "object",
            "properties": {
                "amplitudes": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        0,
                        1,
                        2,
                        3,
                        45,
                        3,
                        2,
                        1
                    ]
                },
                "available": {
                    "type": "boolean",
                    "example": true
                },
                "createdOn": {
                    "type": "string",
                    "example": "2022-05-26T11:17:35.079344Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "location": {
                    "$ref": "#/definitions/postgis.Point"
                },
                "picture": {
                    "type": "string",
                    "example": "https://example.com/picture-1.jpg"
                },
                "sound": {
                    "type": "string",
                    "example": "https://example.com/sound-2.wav"
                },
                "title": {
                    "type": "string",
                    "example": "Forêt à l'aube"
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "postgis.Point": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        },
        "user.AddUser": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "bob"
                }
            }
        },
        "user.AuthUser": {
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "bob"
                },
                "password": {
                    "type": "string",
                    "example": "9b768967-d491-4baa-a812-24ea8a9c274d"
                }
            }
        },
        "user.User": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "admin": {
                    "type": "boolean",
                    "example": false
                },
                "createdOn": {
                    "type": "string",
                    "example": "2022-05-26T11:17:35.079344Z"
                },
                "name": {
                    "type": "string",
                    "example": "bob"
                },
                "password": {
                    "type": "string",
                    "example": "9b768967-d491-4baa-a812-24ea8a9c274d"
                },
                "userId": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 123
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger for biophonie-api",
	Description:      "API of biophonie (https://secret-garden-77375.herokuapp.com/). Files are located in \"assets/\"",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
