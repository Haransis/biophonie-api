basePath: /api/v1
definitions:
  geopoint.GeoPoint:
    properties:
      amplitudes:
        example:
        - 0
        - 1
        - 2
        - 3
        - 45
        - 3
        - 2
        - 1
        items:
          type: integer
        type: array
      created_on:
        example: "2022-05-26T11:17:35.079344Z"
        type: string
      id:
        example: 1
        type: integer
      location:
        $ref: '#/definitions/geopoint.Location'
      picture:
        example: https://example.com/picture-1.jpg
        type: string
      sound:
        example: https://example.com/sound-2.mp3
        type: string
      title:
        example: Forêt à l'aube
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  geopoint.Location:
    properties:
      todo:
        type: string
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  user.AddUser:
    properties:
      name:
        example: bob
        type: string
    required:
    - name
    type: object
  user.User:
    properties:
      created_on:
        example: "2022-05-26T11:17:35.079344Z"
        type: string
      last_login:
        example: "2022-05-26T11:17:35.079344Z"
        type: string
      name:
        example: bob
        type: string
      token:
        example: auinrsetanruistnstnaustie
        type: string
      user_id:
        example: 123
        type: integer
    required:
    - name
    type: object
info:
  contact:
    email: TODO
    name: TODO
    url: TODO
  description: API of biophonie (https://secret-garden-77375.herokuapp.com/).
  license:
    name: GPL-3.0 license
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  termsOfService: TODO
  title: Swagger for biophonie-api
  version: "1.0"
paths:
  /geopoint:
    post:
      consumes:
      - multipart/form-data
      description: create the geopoint in the database and receive the sound and picture
        file
      parameters:
      - example:
        - 0
        - 1
        - 2
        - 3
        - 45
        - 3
        - 2
        - 1
        in: formData
        items:
          type: integer
        name: amplitudes
        type: array
      - example: "2022-05-26T11:17:35.079344Z"
        in: formData
        name: date
        type: string
      - example:
        - 38.652608
        - -120.357448
        in: formData
        items:
          type: number
        name: location
        type: array
      - example: Forêt à l'aube
        in: formData
        name: title
        type: string
      - example: 1
        in: formData
        name: user_id
        type: integer
      - description: geopoint sound
        in: formData
        name: sound
        required: true
        type: file
      - description: geopoint picture
        in: formData
        name: picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/geopoint.GeoPoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: create a geopoint
      tags:
      - Geopoint
  /geopoint/{id}:
    get:
      consumes:
      - application/json
      description: retrieve the geopoint in the database using its name
      parameters:
      - description: geopoint id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/geopoint.GeoPoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: get a geopoint
      tags:
      - Geopoint
  /geopoint/{id}/picture:
    get:
      consumes:
      - application/json
      description: create the geopoint in the database and receive the sound and picture
        file
      parameters:
      - description: geopoint id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: get the url of the picture
      tags:
      - Geopoint
  /ping:
    get:
      consumes:
      - application/json
      description: used to check if api is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: pings the api
  /user:
    post:
      consumes:
      - application/json
      description: create a user in the database
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.AddUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.AddUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: create user
      tags:
      - User
  /user/{username}:
    get:
      consumes:
      - application/json
      description: retrieve the user in the database using its name
      parameters:
      - description: user name
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: get a user
      tags:
      - User
swagger: "2.0"
