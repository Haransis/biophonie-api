basePath: /api/v1
definitions:
  controller.ErrMsg:
    properties:
      message:
        example: malformed request
        type: string
    type: object
  geopoint.ClosestGeoId:
    properties:
      geoId:
        example: 18
        type: integer
    type: object
  geopoint.GeoPoint:
    properties:
      amplitudes:
        example:
        - 0
        - 1
        - 2
        - 3
        - 45
        - 3
        - 2
        - 1
        items:
          type: number
        type: array
      available:
        example: true
        type: boolean
      createdOn:
        example: "2022-05-26T11:17:35.079344Z"
        type: string
      id:
        example: 1
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      picture:
        example: https://example.com/picture-1.jpg
        type: string
      sound:
        example: https://example.com/sound-2.wav
        type: string
      title:
        example: Forêt à l'aube
        type: string
      userId:
        example: 1
        type: integer
    type: object
  user.AddUser:
    properties:
      name:
        example: bob
        maxLength: 20
        minLength: 3
        type: string
    required:
    - name
    type: object
  user.AuthUser:
    properties:
      name:
        example: bob
        maxLength: 20
        minLength: 3
        type: string
      password:
        example: 9b768967-d491-4baa-a812-24ea8a9c274d
        type: string
    required:
    - name
    - password
    type: object
  user.User:
    properties:
      admin:
        example: false
        type: boolean
      createdOn:
        example: "2022-05-26T11:17:35.079344Z"
        type: string
      name:
        example: bob
        type: string
      password:
        example: 9b768967-d491-4baa-a812-24ea8a9c274d
        type: string
      userId:
        example: 123
        minimum: 0
        type: integer
    required:
    - name
    type: object
info:
  contact:
    email: TODO
    name: TODO
    url: TODO
  description: API of biophonie (https://secret-garden-77375.herokuapp.com/). Files
    are located in "assets/"
  license:
    name: GPL-3.0 license
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  termsOfService: TODO
  title: Swagger for biophonie-api
  version: "1.0"
paths:
  /geopoint/{id}:
    get:
      consumes:
      - application/json
      description: retrieve the geopoint in the database using its id
      parameters:
      - description: geopoint id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/geopoint.GeoPoint'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: get a geopoint
      tags:
      - Geopoint
  /geopoint/{id}/picture:
    get:
      consumes:
      - application/json
      description: located in assets/
      parameters:
      - description: geopoint id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: get the picture filename
      tags:
      - Geopoint
  /geopoint/{id}/sound:
    get:
      consumes:
      - application/json
      description: located in assets/
      parameters:
      - description: geopoint id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: get the sound filename
      tags:
      - Geopoint
  /geopoint/closest/to/{latitude}/{longitude}:
    get:
      consumes:
      - application/json
      description: retrieve the closest geopoint to another geopoint, excluding other
        geopoints
      parameters:
      - description: latitude
        in: path
        name: latitude
        required: true
        type: number
      - description: longitude
        in: path
        name: longitude
        required: true
        type: number
      - description: srid to project
        in: query
        name: srid
        type: integer
      - collectionFormat: multi
        description: optional ids to exclude from search
        in: query
        items:
          type: integer
        name: not[]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/geopoint.ClosestGeoId'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: get the closest geopoint
      tags:
      - Geopoint
  /ping:
    get:
      consumes:
      - application/json
      description: used to check if api is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: pings the api
  /restricted/geopoint:
    post:
      consumes:
      - multipart/form-data
      description: create the geopoint in the database and save the sound and picture
        file (see testgeopoint dir)
      parameters:
      - description: geopoint infos in a utf-8 json file
        in: formData
        name: geopoint
        required: true
        type: file
      - description: geopoint sound
        in: formData
        name: sound
        required: true
        type: file
      - description: geopoint picture
        in: formData
        name: picture
        type: file
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/geopoint.GeoPoint'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: create a geopoint
      tags:
      - Geopoint
  /restricted/geopoint/{id}/enable:
    patch:
      consumes:
      - application/json
      description: make the geopoint available
      parameters:
      - description: geopoint id
        in: path
        name: id
        required: true
        type: integer
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: make the geopoint available
      tags:
      - Geopoint
  /restricted/ping:
    get:
      consumes:
      - application/json
      description: used to check if client is authenticated
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: pings the authenticated api
  /restricted/user/{id}:
    patch:
      consumes:
      - application/json
      description: make a user admin
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: user is now admin
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: make a user admin
      tags:
      - Authentication
  /user:
    post:
      consumes:
      - application/json
      description: create a user in the database
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: create user
      tags:
      - User
  /user/{name}:
    get:
      consumes:
      - application/json
      description: retrieve the user in the database using its name
      parameters:
      - description: user name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: get a user
      tags:
      - User
  /user/authorize:
    post:
      consumes:
      - application/json
      description: create a token
      parameters:
      - description: authentication user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.AuthUser'
      produces:
      - text/plain
      responses:
        "200":
          description: token to use for authentication
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrMsg'
      summary: create a token
      tags:
      - Authentication
swagger: "2.0"
